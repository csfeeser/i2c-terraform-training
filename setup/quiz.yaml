---
- Question: The terraform.tfstate file always matches your currently built
    infrastructure.
  A: true
  B: false
  Answer: B
    since one can manually change resources and therefore drift from the state
    configuration. Terraform has no way to know or track changes made outside of
    it.
- Question: What is the workflow for deploying new infrastructure with Terraform?
  A: terraform plan to import the current infrastructure to the state file, make
    code changes, and terraform apply to update the infrastructure.
  B: Write a Terraform configuration, run terraform show to view proposed changes,
    and terraform apply to create new infrastructure.
  C: terraform import to import the current infrastructure to the state file, make
    code changes, and terraform apply to update the infrastructure.
  D: Write a Terraform configuration, run terraform init, run terraform plan to
    view planned infrastructure changes, and terraform apply to create new
    infrastructure.
  Answer: D
- Question: You run a local-exec provisioner in a null resource called
    null_resource.run_script and realize that you need to rerun the script.
    Which of the following commands would you use first?
  A: terraform taint null_resource.run_script
  B: terraform apply -replace=null_resource.run_script
  C: terraform validate null_resource.run_script
  D: terraform plan -target=null_resource.run_script
  Answer: B
- Question: Which provisioner invokes a process on the resource created by Terraform?
  A: remote-exec
  B: null-exec
  C: local-exec
  D: file
  Answer: A
    resource is created. This invokes a process on the machine running
    Terraform, not on the resource.
    https://www.terraform.io/language/resources/provisioners/local-exec
- Question: What command does Terraform require the first time you run it within a
    configuration directory?
  A: terrafrom import
  B: terraform init
  C: terraform plan
  D: terraform workspace
  Answer: B
- Question: |
    What is the provider for this fictitious resource?
    resource "aws_vpc" "main" {
       name = "test"
    }
  A: vpc
  B: main
  C: aws
  D: test
  Answer: C
- Question: Which of the following is not a valid string function in Terraform?
  A: split
  B: join
  C: slice
  D: chomp
  Answer: C
- Question: terraform init initializes a sample main.tf file in the current directory.
  A: true
  B: false
  Answer: B
    plugins for the providers you are using. You will need to create a main.tf
    file yourself.
- Question: Terraform requires the Go runtime as a prerequisite for installation.
  A: true
  B: false
  Answer: B
    Go installed as you get a binary after installing terraform.
- Question: terraform validate validates the syntax of Terraform files
  A: true
  B: false
  Answer: A
    syntactically valid and internally consistent, regardless of any provided
    variables or existing state. It is thus primarily useful for general
    verification of reusable modules, including correctness of attribute names
    and value types.
- Question: Which of the following is the correct way to pass the value in the
    variable "num_servers" into a module with the input servers?
  A: servers = num_servers
  B: servers = variable.num_servers
  C: servers = var(num_servers)
  D: servers = var.num_servers
  Answer: D
    variable. B is incorrect because the full word does not need to be used. C
    is incorrect because parens are not used.
- Question: A Terraform provisioner must be nested inside a resource configuration block.
  A: true
  B: false
  Answer: A
    WinRM, and expect a nested connection block with details about how to
    connect.
- Question: Where does the Terraform local backend store its state?
  A: In the /tmp directory
  B: In the terraform.tfvars file
  C: In the terraform.tfstate file
  D: In the user's .terraformrc file
  Answer: C
    state using system APIs, and performs operations locally.
    https://www.terraform.io/docs/language/settings/backends/local.html
- Question: >
    Which argument(s) is (are) required when declaring a Terraform
    variable?
    default - A default value which then makes the variable optional.
    type - This argument specifies what value types are accepted for the variable.
    description - This specifies the input variable's documentation.
    validation - A block to define validation rules, usually in addition to type constraints.
    sensitive - Limits Terraform UI output when the variable is used in configuration.
    nullable - Specify if the variable can be null within the module.
  A: type
  B: default
  C: description
  D: All of the above
  E: None of the above
  Answer: E
    variable block with NO arguments.
- Question: What is one disadvantage of using dynamic blocks in Terraform?
  A: They cannot be used to loop through a list of values
  B: Dynamic blocks can construct repeatable nested blocks
  C: They make configuration harder to read and understand
  D: Terraform will run more slowly
  Answer: C
    variables, which can make it harder to see exactly what resources are being
    created.
- Question: >
    Examine the following Terraform configuration, which uses the data
    source for an AWS AMI.
    What value should you enter for the ami argument in the AWS instance resource?
    data "aws_ami" "ubuntu" {
       ...
    }
    resource "aws_instance" "web" {
       ami = _________
       instance_type = "t2.micro"
       tags = {
         Name = "HelloWorld"
       }
    }
  A: aws_ami.ubuntu
  B: data.aws_ami.ubuntu
  C: data.aws_ami.ubuntu.id
  D: aws_ami.ubuntu.id
  Answer: C
- Question: FILL IN THE BLANK - You need to specify a dependency manually. What
    resource meta-parameter can you use to make sure Terraform respects the
    dependency? Type your answer in the field provided. The text field is not
    case-sensitive and all variations of the correct answer are accepted.
  Answer: depends_on
- Question: |+
    What is the name assigned by Terraform to reference this resource?
    resource "azurerm_resource_group" "dev" {
       name = "test"
       location = "westus"}
  A: dev
  B: azurerm_resource_group
  C: azurerm
  D: test
  Answer: A
    ("aws_instance") with a given local name ("dev")
- Question: What command should you run to display all workspaces for the current
    configuration?
  A: terraform workspace
  B: terraform workspace show
  C: terraform workspace list
  D: terraform show workspace
  Answer: C
- Question: Which of the following is not a valid Terraform collection type?
  A: list
  B: map
  C: tree
  D: set
  Answer: C
- Question: How can terraform plan aid in the development process?
  A: Validates your expectations against the execution plan without permanently
    modifying state
  B: Initializes your working directory containing your Terraform configuration
    files
  C: Formats your Terraform configuration files
  D: Reconciles Terraform's state against deployed resources and permanently
    modifies state using the current status of deployed resources
  Answer: A
    outlines the steps that Terraform will take to reach your desired
    infrastructure state. It allows you to preview and validate the changes that
    will be made to your infrastructure before actually making those changes.
    This can be helpful in the development process because it allows you to see
    exactly what will be changed and ensure that it aligns with your
    expectations before you apply those changes.
- Question: You would like to reuse the same Terraform configuration for your
    development and production environments with a different state file for
    each. Which command would you use?
  A: terraform import
  B: terraform workspace
  C: terraform state
  D: terraform init
  Answer: B
- Question: You have a simple Terraform configuration containing one virtual
    machine (VM) in a cloud provider. You run terraform apply and the VM is
    created successfully. What will happen if you delete the VM using the cloud
    provider console, and run terraform apply again without changing any
    Terraform code?
  A: Terraform will remove the VM from state file
  B: Terraform will report an error
  C: Terraform will not make any changes
  D: Terraform will recreate the VM
  Answer: D
    detect the VM is missing, and will update state accordingly. Then, it will
    create a new one to match configuration
- Question: Which of the following arguments are required when declaring a
    Terraform output?
  A: sensitive
  B: description
  C: default
  D: value
  Answer: D
    type of value that will be accepted as the value for a variable. If no type
    constraint is set then a value of any type is accepted.
- Question: A junior admin accidentally deleted some of your cloud instances. What
    does Terraform do when you run terraform apply?
  A: Build a completely brand new set of infrastructure
  B: Tear down the entire workspace infrastructure and rebuild it
  C: Rebuild only the instances that were deleted
  D: Stop and generate an error message about the missing instances
  Answer: C
    state file is not thesame as the Desired State. Terraform will check its
    configuration resource files and if it finds a resource that is present in
    the state file but not in the Desired state, it will create it
- Question: Which type of block fetches or computes information for use elsewhere
    in a Terraform configuration?
  A: provider
  B: resource
  C: local
  D: data
  Answer: D
    you use "data". With "resource" you create new infrastructure.
- Question: Which Terraform collection type should you use to store key/value pairs?
  A: tuple
  B: set
  C: map
  D: list
  Answer: C
    So, the right option is C.
- Question: Terraform Cloud is available only as a paid offering from HashiCorp.
  A: true
  B: false
  Answer: B
    including remote state storage, remote runs, and VCS connections.
- Question: terrafrom apply will fail if you have not used terraform plan first to
    update the plan output.
  A: true
  B: false
  Answer: B
    plan. It is an optional command.
- Question: A terraform output that sets the "sensitive" argument to true will not
    store that value in the state file.
  A: true
  B: false
  Answer: B
    anyone who can access the state data will have access to the sensitive
    values in cleartext.
- Question: Which command lets you experiment with terraform's built-in functions?
  A: terraform env
  B: terraform console
  C: terraform test
  D: terraform validate
  Answer: B
    can experiment with the behavior of Terraform's built-in functions from the
    Terraform expression console, by running the terraform console command."
- Question: What does terraform destroy do?
  A: Destroy all infrastructure in the Terraform state file
  B: Destroy all Terraform code files in the current directory while leaving the
    state file intact
  C: Destroy all infrastructure in the configured Terraform provider
  D: Destroy the Terraform stte file whil leaving infrastructure intact
  Answer: A
    Terraform project. This command is the inverse of terraform apply in that it
    terminates all the resources specified in your Terraform state. It does not
    destroy resources running elsewhere that are not managed by the current
    Terraform project.
- Question: Running a terraform format without any arguments in a directory with
    Terraform configuration files will check the formatting of those files
    WITHOUT changing their contents.
  A: true
  B: false
  Answer: B
    configuration files to a canonical format and style.
